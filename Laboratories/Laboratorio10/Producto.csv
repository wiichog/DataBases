import java.util.*;
public class CompilersTypes extends CompilersBaseVisitor<String> {
	public Map<String, String> map = new HashMap<String, String>();
	public int Ambientes;
	
	@Override
	public String visitProgram(CompilersParser.ProgramContext ctx){
		System.out.println("visite program");
		String result = visitChildren(ctx);
		System.out.println(result);
		return result;
	}
	
	@Override public String visitDeclaration(CompilersParser.DeclarationContext ctx) { 
		//return visitChildren(ctx); 
		return "Ingrese a visitDeclaration";
		}

	@Override public String visitVarDeclaration(CompilersParser.VarDeclarationContext ctx) { 
		//return visitChildren(ctx); 
		return "Ingrese a visitVarDeclaration";
		}

	@Override public String visitStructDeclaration(CompilersParser.StructDeclarationContext ctx) { 
		//return visitChildren(ctx); 
		return "Ingrese a visitStructDeclaration";
		}

	@Override public String visitVarType(CompilersParser.VarTypeContext ctx) { 
		//return visitChildren(ctx); 
		return "Ingrese a visitVarType";
		}

	@Override public T visitMethodDeclaration(CompilersParser.MethodDeclarationContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitMethodType(CompilersParser.MethodTypeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitParameter(CompilersParser.ParameterContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitParameterType(CompilersParser.ParameterTypeContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitBlock(CompilersParser.BlockContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitStatement(CompilersParser.StatementContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAssignation(CompilersParser.AssignationContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitWhileBlock(CompilersParser.WhileBlockContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitReturnBlock(CompilersParser.ReturnBlockContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitPrint(CompilersParser.PrintContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitScan(CompilersParser.ScanContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitMyIf(CompilersParser.MyIfContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLocation(CompilersParser.LocationContext ctx) { return visitChildren(ctx); }

	@Override public T visitDotLocation(CompilersParser.DotLocationContext ctx) { return visitChildren(ctx); }

	@Override public T visitDeclaredVariable(CompilersParser.DeclaredVariableContext ctx) { return visitChildren(ctx); }

	@Override public T visitVariable(CompilersParser.VariableContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitArrayVariable(CompilersParser.ArrayVariableContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitExpressionInP(CompilersParser.ExpressionInPContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitNExpression(CompilersParser.NExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitExpression(CompilersParser.ExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAndExpression(CompilersParser.AndExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitEqualsExpression(CompilersParser.EqualsExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitRelationExpression(CompilersParser.RelationExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAddSubsExpression(CompilersParser.AddSubsExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitMulDivExpression(CompilersParser.MulDivExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitPrExpression(CompilersParser.PrExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitBasicExpression(CompilersParser.BasicExpressionContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitBasic(CompilersParser.BasicContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitArg(CompilersParser.ArgContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitMethodCall(CompilersParser.MethodCallContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitAs_op(CompilersParser.As_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitMd_op(CompilersParser.Md_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitPr_op(CompilersParser.Pr_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitRel_op(CompilersParser.Rel_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitEq_op(CompilersParser.Eq_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitCond_op(CompilersParser.Cond_opContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitLiteral(CompilersParser.LiteralContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitInt_literal(CompilersParser.Int_literalContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitChar_literal(CompilersParser.Char_literalContext ctx) { return visitChildren(ctx); }
	
	@Override public T visitBool_literal(CompilersParser.Bool_literalContext ctx) { return visitChildren(ctx); }
	
}
